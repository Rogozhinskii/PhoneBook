@using Microsoft.AspNetCore.Identity
@using System.Linq
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    var role = UserRoles.RegularUser.ToString();
    if (SignInManager.IsSignedIn(User))
    {
        User currentUser = await UserManager.FindByNameAsync(User.Identity.Name);
        role=(await UserManager.GetRolesAsync(currentUser)).SingleOrDefault();
    }
    
}


<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    
    
    <li class="nav-item">
        <a  class="nav-link text-dark">Hello @User.Identity.Name!</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-controller="Account" asp-action="Logout">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
    
    @if (@role!=null && @role == UserRoles.Administrator.ToString())
    {
        <li class="nav-item">
                <a class="nav-link text-dark" asp-controller="ApplicationRole" asp-action="Roles">Roles</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-dark" asp-controller="User" asp-action="Index">Users</a>
            </li>
    }
       
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="User" asp-action="AddUser">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Login</a>
    </li>
}
</ul>




